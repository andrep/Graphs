Your task:

* Grapher is a simple visual display of received accelerometer data. Imagine that you have accelerometer data being received from an iPhone or another sensor device, and you want to display the relative amount of motion to the user, by using some visual display to show the motion. If the accelerometer moves a lot, the view should visually indicate it.
 
* The Xcode project contains a number of classes to simulate accelerometer data and wire up the basic iOS application skeleton, including a `UIView`/`UIViewController` pair to draw that data in a view. `MPSAccelerometerData` is the main model class for accelerometer data. `MPSAccelerometerDataSource` generates random accelerometer data according to a timer, and posts a notification whenever new data is generated. `MPSGraphView` is the main (and only) view that draws the accelerometer data, and `MPSViewController` is its owning view controller.
 
* If you Build & Run the project, you will see that the implementation we have given you simply draws a diagonal line. Your task is to modify the code to display the accelerometer motion data generated by the data source.

* When displaying the accelerometer data in graphical form, use whatever form conveys both relative magnitude and relative time.

	* For example, draw a graph using the X axis for time oldest-to-newest left-to-right and the Y axis for magnitude. (There's no need to draw the axes.) When the data overflows the view's size, cope in whatever way you'd like: make the view scrollable; wrap the drawing around right-to-left when you overrun the time axis; we recommend whatever works best with the implementation you come up with.
 
* While you have freedom to be as simple or as fancy as you like, we recommend doing a simple view such as the X/Y graph described above. All that is required is to show some visual indication of the magnitude & time dimensions in the `MPSAccelerometerData` class. We do not intend for this task to take more than a few hours of your time, and we think that two or three hours should be sufficient for a very simple implementation. If you can think of a way to display the data that results in an easier implementation than the X/Y graph, or you think that it would be easy to make a small addition that results in a far nicer visual display, please go ahead. As with all software engineering, making it work first, then making it work better is always prudent.

* Performance _does not matter_ for this implementation. Build a naïve implementation that draws correctly, but be prepared to discuss ideas around tuning this implementation to draw more quickly, or discuss alternative implementations of the same graphical representation that would be more performant.
 
* Likewise, visual beauty _does not matter_. While we recommend the X/Y graph, we do not wish to limit your creative freedom if you think you have a killer way of showing the data that is feasible to implement.

* You only need to support portrait orientation, but we expect your code to be written so that landscape support could be added in the future without much difficulty.

* After the initial implementation is complete, instantiate the `MPSGraphView` programatically instead of via the storyboard. Modify it and any related files as needed.

* You are completely free to modify absolutely any line of code in any file in this project, remove or add files as you need: all we ask is that you must use the `MPSAccelerometerData` and `MPSAccelerometerDataSource` classes' APIs as your source of accelerometer data. However, if you wish to completely dismantle all the views we've supplied and go crazy with OpenGL, go for it.
 
* Our goal is to evaluate whether you are able to work within an existing data model (`MPSAccelerometerData` and `MPSAccelerometerDataSource`) and create a view based on that model. We are most interested in your engineering choices and whether you are able to execute the task.

* We use git as our revision control system, so it would be beneficial if you can demonstrate that you know how to use git: we'd like to see your development process across several commits in both their patch contents and the commit messages. That said, we are happy to accept your Xcode project in any form (GitHub repository, zip file with just the Xcode project, zip file with project and .git directory, Mercurial/Subversion repository, etc).


Additional information:

`generateAccelerometerData` contains some commented-out code for generating predictable oscillating values instead of `drand48()`-generated data. Feel free to edit the data generated by the data source to help with your debugging.

If you wish to get more fancy and are looking to improve upon a basic implementation, feel free to expose the raw `x`/`y`/`z` properties in the `MPSAccelerometerData` class if you wish to display the individual components differently. We have provided a "magnitude" class that sums the X/Y/Z components into a single component to simplify the task, but again, we do not wish to limit your creative freedom if you wish.
 
 Good luck!
 - Christopher & André.
